{"ast":null,"code":"var _jsxFileName = \"/Users/aaditya/Documents/GitHub/python_acr_schedule/frontend/src/components/RosterView.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/RosterView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RosterView({\n  sheet,\n  currentWeekIndex = 0\n}) {\n  _s();\n  // Display only the first 8 columns.\n  const displayColCount = 8;\n  const [visibleComment, setVisibleComment] = useState(null);\n\n  // For this specific Excel format, we'll create a custom grouping function\n  const groupByShift = rows => {\n    console.log('Grouping data, total rows:', rows.length);\n    if (rows.length === 0) {\n      return [];\n    }\n\n    // First, find the header rows (days of week, dates)\n    let headerStartRow = -1;\n    let daysOfWeekRow = -1;\n\n    // Look for the row with days of the week (Mon, Tues, Wed, etc.)\n    for (let i = 0; i < Math.min(10, rows.length); i++) {\n      const row = rows[i];\n      let dayCount = 0;\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n\n        // Check for days of week\n        if (['Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat', 'Sun'].includes(cellStr)) {\n          dayCount++;\n        }\n      }\n      if (dayCount >= 3) {\n        // If we found at least 3 days of the week\n        daysOfWeekRow = i;\n        console.log('Found days of week row at index', i);\n        break;\n      }\n    }\n    if (daysOfWeekRow === -1) {\n      console.log('Could not find days of week row');\n      // Just return all non-empty rows as one block\n      const nonEmptyRows = rows.filter(row => row.some(cell => {\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        return cellValue !== null && cellValue !== undefined && cellValue !== '';\n      }));\n      if (nonEmptyRows.length > 0) {\n        return [nonEmptyRows];\n      }\n      return [];\n    }\n\n    // Now find the row with \"Meal Periods\" which is typically the start of the schedule data\n    let mealPeriodRowIndex = -1;\n    for (let i = daysOfWeekRow; i < Math.min(daysOfWeekRow + 5, rows.length); i++) {\n      const row = rows[i];\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n        if (cellStr === 'Meal Periods') {\n          console.log('Found Meal Periods row at index', i);\n          mealPeriodRowIndex = i;\n          break;\n        }\n      }\n      if (mealPeriodRowIndex !== -1) break;\n    }\n\n    // If we found days of week but not meal periods, just use the days of week row + 1\n    if (mealPeriodRowIndex === -1) {\n      mealPeriodRowIndex = daysOfWeekRow + 1;\n      console.log('Using row after days of week as start of data:', mealPeriodRowIndex);\n    }\n\n    // The header rows include the days of week row and the meal periods row\n    const headerRows = rows.slice(Math.max(0, daysOfWeekRow), mealPeriodRowIndex + 1);\n    console.log('Header rows:', headerRows.length);\n\n    // Now look for shift blocks after the meal periods row\n    // For this schedule, we'll look for time patterns (e.g., \"11:00 - 11:30\")\n    // or any row that has content in the first column\n    const blocks = [];\n    let currentBlock = [];\n    let blockStarted = false;\n    let currentShift = 'Schedule';\n    for (let i = mealPeriodRowIndex; i < rows.length; i++) {\n      const row = rows[i];\n\n      // Check if this row has a time pattern or content in the first column\n      let hasTimePattern = false;\n      let hasFirstColumnContent = false;\n      let potentialShiftName = '';\n\n      // Check first column for content that might be a shift name\n      const firstCell = row[0] && (typeof row[0] === 'object' ? row[0].value : row[0]);\n      if (firstCell && String(firstCell).trim() !== '') {\n        hasFirstColumnContent = true;\n        potentialShiftName = String(firstCell);\n      }\n\n      // Check if any cell has a time pattern\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n\n        // Check for time patterns like \"XX:XX - XX:XX\"\n        if (cellStr.match(/\\d{1,2}:\\d{2}\\s*-\\s*\\d{1,2}:\\d{2}/)) {\n          hasTimePattern = true;\n          break;\n        }\n      }\n\n      // If this row has a first column content and no time pattern, it might be a new shift\n      if (hasFirstColumnContent && !hasTimePattern && potentialShiftName.length > 3) {\n        // This could be a new shift header\n        if (blockStarted && currentBlock.length > 0) {\n          // End the previous block\n          blocks.push({\n            shiftName: currentShift,\n            headerRows: headerRows,\n            contentRows: currentBlock\n          });\n        }\n\n        // Start a new block\n        currentShift = potentialShiftName;\n        currentBlock = [];\n        blockStarted = true;\n        console.log('Found potential shift:', currentShift);\n      }\n      // If this row has a time pattern or other content, add it to the current block\n      else if ((hasTimePattern || hasFirstColumnContent) && blockStarted) {\n        currentBlock.push(row);\n      }\n      // Empty rows or rows without relevant content are ignored\n    }\n\n    // Add the last block if it exists\n    if (blockStarted && currentBlock.length > 0) {\n      blocks.push({\n        shiftName: currentShift,\n        headerRows: headerRows,\n        contentRows: currentBlock\n      });\n    }\n\n    // If we didn't find any blocks but have header rows, create a default block\n    if (blocks.length === 0 && headerRows.length > 0) {\n      // Find all non-empty rows after the header\n      const contentRows = rows.slice(mealPeriodRowIndex + 1).filter(row => {\n        return row.some(cell => {\n          const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n          return cellValue !== null && cellValue !== undefined && cellValue !== '';\n        });\n      });\n      if (contentRows.length > 0) {\n        blocks.push({\n          shiftName: 'Schedule',\n          headerRows: headerRows,\n          contentRows: contentRows\n        });\n      }\n    }\n    console.log('Found', blocks.length, 'shift blocks');\n    return blocks;\n  };\n  if (!sheet) {\n    console.error('No sheet data provided to RosterView');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available for this week\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 12\n    }, this);\n  }\n  console.log('RosterView received sheet:', sheet);\n\n  // We're now directly using the sheet.data from the API\n  const allRows = sheet.data || [];\n  console.log('Total rows in sheet:', allRows.length);\n\n  // Find the title row (usually contains \"Operations Shift Schedule\")\n  let titleRow = null;\n  let weekHeader = 'Weekly Operations Shift Schedule';\n  for (let i = 0; i < Math.min(10, allRows.length); i++) {\n    const row = allRows[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n      if (cellValue && String(cellValue).includes('Operations Shift Schedule')) {\n        titleRow = row;\n        weekHeader = String(cellValue);\n        console.log('Found title row at index', i, ':', weekHeader);\n        break;\n      }\n    }\n    if (titleRow) break;\n  }\n\n  // Find date range if available and format it as MM-DD-YYYY\n  let dateRange = '';\n  if (titleRow && allRows.length > allRows.indexOf(titleRow) + 1) {\n    const nextRow = allRows[allRows.indexOf(titleRow) + 1];\n    for (let j = 0; j < nextRow.length; j++) {\n      const cell = nextRow[j];\n      const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n      if (cellValue && String(cellValue).includes('through')) {\n        const startDate = nextRow[j - 1] && (typeof nextRow[j - 1] === 'object' ? nextRow[j - 1].value : nextRow[j - 1]);\n        const endDate = nextRow[j + 1] && (typeof nextRow[j + 1] === 'object' ? nextRow[j + 1].value : nextRow[j + 1]);\n        if (startDate && endDate) {\n          // Format dates as MM-DD-YYYY, removing the T00:00:00 part\n          const formatDate = dateStr => {\n            if (!dateStr) return '';\n            const dateOnly = String(dateStr).split('T')[0]; // Remove the T00:00:00 part\n            const parts = dateOnly.split('-');\n            if (parts.length === 3) {\n              return `${parts[1]}-${parts[2]}-${parts[0]}`; // MM-DD-YYYY\n            }\n            return dateStr;\n          };\n          dateRange = `${formatDate(startDate)} through ${formatDate(endDate)}`;\n          console.log('Found date range:', dateRange);\n        }\n        break;\n      }\n    }\n  }\n\n  // Find week separators to split the data into weeks\n  const findWeekSeparators = rows => {\n    const separators = [];\n\n    // Look for rows that might indicate the start of a week\n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        if (cellValue && String(cellValue).includes('Operations Shift Schedule')) {\n          separators.push(i);\n          break;\n        }\n      }\n    }\n\n    // If no separators found, treat the whole sheet as one week\n    if (separators.length === 0) {\n      separators.push(0);\n    }\n    return separators;\n  };\n\n  // Get the week separators\n  const weekSeparators = findWeekSeparators(allRows);\n\n  // Determine the start and end rows for the current week\n  const weekStartRow = weekSeparators[currentWeekIndex] || 0;\n  const weekEndRow = weekSeparators[currentWeekIndex + 1] || allRows.length;\n\n  // Get only the rows for the current week\n  const currentWeekRows = allRows.slice(weekStartRow, weekEndRow);\n\n  // Process the current week's rows\n  const shiftBlocks = groupByShift(currentWeekRows);\n  const handleCellClick = (blockIndex, rowIndex, cellIndex, comment) => {\n    setVisibleComment({\n      blockIndex,\n      rowIndex,\n      cellIndex,\n      comment\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roster-view\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"week-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: weekHeader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), dateRange && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-range\",\n        children: dateRange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), shiftBlocks.length > 0 ?\n    // We have shift blocks to display\n    shiftBlocks.map((block, blockIndex) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shift-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"shift-content\",\n          children: [block.headerRows.map((row, headerRowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-row\",\n            children: row.slice(0, displayColCount).map((cell, cellIndex) => {\n              let cellValue = '';\n              let comment = '';\n              if (cell && typeof cell === 'object' && 'value' in cell) {\n                cellValue = cell.value !== undefined ? String(cell.value) : '';\n                comment = cell.comment || '';\n              } else {\n                cellValue = cell !== undefined ? String(cell) : '';\n              }\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell header-cell\",\n                onClick: () => comment && handleCellClick(blockIndex, headerRowIndex, cellIndex, comment),\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"cell-content\",\n                  children: cellValue\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 317,\n                  columnNumber: 27\n                }, this), comment && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"comment-indicator\",\n                  title: \"Has comment\",\n                  children: \"\\u2022\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 318,\n                  columnNumber: 39\n                }, this), visibleComment && visibleComment.blockIndex === blockIndex && visibleComment.rowIndex === headerRowIndex && visibleComment.cellIndex === cellIndex && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"comment-tooltip\",\n                  children: visibleComment.comment\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 323,\n                  columnNumber: 29\n                }, this)]\n              }, cellIndex, true, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 25\n              }, this);\n            })\n          }, `header-${headerRowIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 19\n          }, this)), block.contentRows.map((row, rowIndex) => {\n            // Add a divider before rows that might be shift boundaries\n            const isShiftBoundary = rowIndex > 0 && row[0] && (typeof row[0] === 'object' ? row[0].value : row[0]) && String(typeof row[0] === 'object' ? row[0].value : row[0]).trim() !== '';\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [isShiftBoundary && /*#__PURE__*/_jsxDEV(\"hr\", {\n                className: \"shift-divider\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 43\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"shift-row\",\n                children: row.slice(0, displayColCount).map((cell, cellIndex) => {\n                  let cellValue = '';\n                  let comment = '';\n                  if (cell && typeof cell === 'object' && 'value' in cell) {\n                    cellValue = cell.value !== undefined ? String(cell.value) : '';\n                    comment = cell.comment || '';\n                  } else {\n                    cellValue = cell !== undefined ? String(cell) : '';\n                  }\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"cell\",\n                    onClick: () => comment && handleCellClick(blockIndex, rowIndex, cellIndex, comment),\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"cell-content\",\n                      children: cellValue\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 359,\n                      columnNumber: 31\n                    }, this), comment && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"comment-indicator\",\n                      title: \"Has comment\",\n                      children: \"\\u2022\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 360,\n                      columnNumber: 43\n                    }, this), visibleComment && visibleComment.blockIndex === blockIndex && visibleComment.rowIndex === rowIndex && visibleComment.cellIndex === cellIndex && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"comment-tooltip\",\n                      children: visibleComment.comment\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 365,\n                      columnNumber: 33\n                    }, this)]\n                  }, cellIndex, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 354,\n                    columnNumber: 29\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 23\n              }, this)]\n            }, rowIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 21\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 15\n        }, this), blockIndex < shiftBlocks.length - 1 && /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"block-divider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 55\n        }, this)]\n      }, blockIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 13\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No shift data available for this week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Debug Info:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Week Header: \", weekHeader]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Available Rows: \", allRows.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Shift Blocks Found: \", shiftBlocks.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n}\n_s(RosterView, \"ZQzGhEeTE/nZZ9dFgdtTVkYVobY=\");\n_c = RosterView;\nexport default RosterView;\nvar _c;\n$RefreshReg$(_c, \"RosterView\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","RosterView","sheet","currentWeekIndex","_s","displayColCount","visibleComment","setVisibleComment","groupByShift","rows","console","log","length","headerStartRow","daysOfWeekRow","i","Math","min","row","dayCount","j","cell","cellValue","value","cellStr","undefined","String","includes","nonEmptyRows","filter","some","mealPeriodRowIndex","headerRows","slice","max","blocks","currentBlock","blockStarted","currentShift","hasTimePattern","hasFirstColumnContent","potentialShiftName","firstCell","trim","match","push","shiftName","contentRows","error","children","fileName","_jsxFileName","lineNumber","columnNumber","allRows","data","titleRow","weekHeader","dateRange","indexOf","nextRow","startDate","endDate","formatDate","dateStr","dateOnly","split","parts","findWeekSeparators","separators","weekSeparators","weekStartRow","weekEndRow","currentWeekRows","shiftBlocks","handleCellClick","blockIndex","rowIndex","cellIndex","comment","className","map","block","headerRowIndex","onClick","title","isShiftBoundary","Fragment","_c","$RefreshReg$"],"sources":["/Users/aaditya/Documents/GitHub/python_acr_schedule/frontend/src/components/RosterView.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../styles/RosterView.css';\n\nfunction RosterView({ sheet, currentWeekIndex = 0 }) {\n  // Display only the first 8 columns.\n  const displayColCount = 8;\n  const [visibleComment, setVisibleComment] = useState(null);\n\n  // For this specific Excel format, we'll create a custom grouping function\n  const groupByShift = (rows) => {\n    console.log('Grouping data, total rows:', rows.length);\n    \n    if (rows.length === 0) {\n      return [];\n    }\n    \n    // First, find the header rows (days of week, dates)\n    let headerStartRow = -1;\n    let daysOfWeekRow = -1;\n    \n    // Look for the row with days of the week (Mon, Tues, Wed, etc.)\n    for (let i = 0; i < Math.min(10, rows.length); i++) {\n      const row = rows[i];\n      let dayCount = 0;\n      \n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n        \n        // Check for days of week\n        if (['Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat', 'Sun'].includes(cellStr)) {\n          dayCount++;\n        }\n      }\n      \n      if (dayCount >= 3) { // If we found at least 3 days of the week\n        daysOfWeekRow = i;\n        console.log('Found days of week row at index', i);\n        break;\n      }\n    }\n    \n    if (daysOfWeekRow === -1) {\n      console.log('Could not find days of week row');\n      // Just return all non-empty rows as one block\n      const nonEmptyRows = rows.filter(row => row.some(cell => {\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        return cellValue !== null && cellValue !== undefined && cellValue !== '';\n      }));\n      \n      if (nonEmptyRows.length > 0) {\n        return [nonEmptyRows];\n      }\n      return [];\n    }\n    \n    // Now find the row with \"Meal Periods\" which is typically the start of the schedule data\n    let mealPeriodRowIndex = -1;\n    for (let i = daysOfWeekRow; i < Math.min(daysOfWeekRow + 5, rows.length); i++) {\n      const row = rows[i];\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n        \n        if (cellStr === 'Meal Periods') {\n          console.log('Found Meal Periods row at index', i);\n          mealPeriodRowIndex = i;\n          break;\n        }\n      }\n      if (mealPeriodRowIndex !== -1) break;\n    }\n    \n    // If we found days of week but not meal periods, just use the days of week row + 1\n    if (mealPeriodRowIndex === -1) {\n      mealPeriodRowIndex = daysOfWeekRow + 1;\n      console.log('Using row after days of week as start of data:', mealPeriodRowIndex);\n    }\n    \n    // The header rows include the days of week row and the meal periods row\n    const headerRows = rows.slice(Math.max(0, daysOfWeekRow), mealPeriodRowIndex + 1);\n    console.log('Header rows:', headerRows.length);\n    \n    // Now look for shift blocks after the meal periods row\n    // For this schedule, we'll look for time patterns (e.g., \"11:00 - 11:30\")\n    // or any row that has content in the first column\n    const blocks = [];\n    let currentBlock = [];\n    let blockStarted = false;\n    let currentShift = 'Schedule';\n    \n    for (let i = mealPeriodRowIndex; i < rows.length; i++) {\n      const row = rows[i];\n      \n      // Check if this row has a time pattern or content in the first column\n      let hasTimePattern = false;\n      let hasFirstColumnContent = false;\n      let potentialShiftName = '';\n      \n      // Check first column for content that might be a shift name\n      const firstCell = row[0] && (typeof row[0] === 'object' ? row[0].value : row[0]);\n      if (firstCell && String(firstCell).trim() !== '') {\n        hasFirstColumnContent = true;\n        potentialShiftName = String(firstCell);\n      }\n      \n      // Check if any cell has a time pattern\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n        \n        // Check for time patterns like \"XX:XX - XX:XX\"\n        if (cellStr.match(/\\d{1,2}:\\d{2}\\s*-\\s*\\d{1,2}:\\d{2}/)) {\n          hasTimePattern = true;\n          break;\n        }\n      }\n      \n      // If this row has a first column content and no time pattern, it might be a new shift\n      if (hasFirstColumnContent && !hasTimePattern && potentialShiftName.length > 3) {\n        // This could be a new shift header\n        if (blockStarted && currentBlock.length > 0) {\n          // End the previous block\n          blocks.push({\n            shiftName: currentShift,\n            headerRows: headerRows,\n            contentRows: currentBlock\n          });\n        }\n        \n        // Start a new block\n        currentShift = potentialShiftName;\n        currentBlock = [];\n        blockStarted = true;\n        console.log('Found potential shift:', currentShift);\n      } \n      // If this row has a time pattern or other content, add it to the current block\n      else if ((hasTimePattern || hasFirstColumnContent) && blockStarted) {\n        currentBlock.push(row);\n      }\n      // Empty rows or rows without relevant content are ignored\n    }\n    \n    // Add the last block if it exists\n    if (blockStarted && currentBlock.length > 0) {\n      blocks.push({\n        shiftName: currentShift,\n        headerRows: headerRows,\n        contentRows: currentBlock\n      });\n    }\n    \n    // If we didn't find any blocks but have header rows, create a default block\n    if (blocks.length === 0 && headerRows.length > 0) {\n      // Find all non-empty rows after the header\n      const contentRows = rows.slice(mealPeriodRowIndex + 1).filter(row => {\n        return row.some(cell => {\n          const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n          return cellValue !== null && cellValue !== undefined && cellValue !== '';\n        });\n      });\n      \n      if (contentRows.length > 0) {\n        blocks.push({\n          shiftName: 'Schedule',\n          headerRows: headerRows,\n          contentRows: contentRows\n        });\n      }\n    }\n    \n    console.log('Found', blocks.length, 'shift blocks');\n    return blocks;\n  };\n\n  if (!sheet) {\n    console.error('No sheet data provided to RosterView');\n    return <div>No data available for this week</div>;\n  }\n  \n  console.log('RosterView received sheet:', sheet);\n  \n  // We're now directly using the sheet.data from the API\n  const allRows = sheet.data || [];\n  console.log('Total rows in sheet:', allRows.length);\n  \n  // Find the title row (usually contains \"Operations Shift Schedule\")\n  let titleRow = null;\n  let weekHeader = 'Weekly Operations Shift Schedule';\n  \n  for (let i = 0; i < Math.min(10, allRows.length); i++) {\n    const row = allRows[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n      if (cellValue && String(cellValue).includes('Operations Shift Schedule')) {\n        titleRow = row;\n        weekHeader = String(cellValue);\n        console.log('Found title row at index', i, ':', weekHeader);\n        break;\n      }\n    }\n    if (titleRow) break;\n  }\n  \n  // Find date range if available and format it as MM-DD-YYYY\n  let dateRange = '';\n  if (titleRow && allRows.length > allRows.indexOf(titleRow) + 1) {\n    const nextRow = allRows[allRows.indexOf(titleRow) + 1];\n    for (let j = 0; j < nextRow.length; j++) {\n      const cell = nextRow[j];\n      const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n      if (cellValue && String(cellValue).includes('through')) {\n        const startDate = nextRow[j-1] && (typeof nextRow[j-1] === 'object' ? nextRow[j-1].value : nextRow[j-1]);\n        const endDate = nextRow[j+1] && (typeof nextRow[j+1] === 'object' ? nextRow[j+1].value : nextRow[j+1]);\n        if (startDate && endDate) {\n          // Format dates as MM-DD-YYYY, removing the T00:00:00 part\n          const formatDate = (dateStr) => {\n            if (!dateStr) return '';\n            const dateOnly = String(dateStr).split('T')[0]; // Remove the T00:00:00 part\n            const parts = dateOnly.split('-');\n            if (parts.length === 3) {\n              return `${parts[1]}-${parts[2]}-${parts[0]}`; // MM-DD-YYYY\n            }\n            return dateStr;\n          };\n          \n          dateRange = `${formatDate(startDate)} through ${formatDate(endDate)}`;\n          console.log('Found date range:', dateRange);\n        }\n        break;\n      }\n    }\n  }\n  \n  // Find week separators to split the data into weeks\n  const findWeekSeparators = (rows) => {\n    const separators = [];\n    \n    // Look for rows that might indicate the start of a week\n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        if (cellValue && String(cellValue).includes('Operations Shift Schedule')) {\n          separators.push(i);\n          break;\n        }\n      }\n    }\n    \n    // If no separators found, treat the whole sheet as one week\n    if (separators.length === 0) {\n      separators.push(0);\n    }\n    \n    return separators;\n  };\n  \n  // Get the week separators\n  const weekSeparators = findWeekSeparators(allRows);\n  \n  // Determine the start and end rows for the current week\n  const weekStartRow = weekSeparators[currentWeekIndex] || 0;\n  const weekEndRow = weekSeparators[currentWeekIndex + 1] || allRows.length;\n  \n  // Get only the rows for the current week\n  const currentWeekRows = allRows.slice(weekStartRow, weekEndRow);\n  \n  // Process the current week's rows\n  const shiftBlocks = groupByShift(currentWeekRows);\n\n  const handleCellClick = (blockIndex, rowIndex, cellIndex, comment) => {\n    setVisibleComment({\n      blockIndex,\n      rowIndex,\n      cellIndex,\n      comment\n    });\n  };\n\n  return (\n    <div className=\"roster-view\">\n      <div className=\"week-header\">\n        <h2>{weekHeader}</h2>\n        {dateRange && <div className=\"date-range\">{dateRange}</div>}\n      </div>\n      {shiftBlocks.length > 0 ? (\n        // We have shift blocks to display\n        shiftBlocks.map((block, blockIndex) => {\n          return (\n            <div key={blockIndex} className=\"shift-block\">\n              {/* No shift name header as requested */}\n              <div className=\"shift-content\">\n                {/* Display the header rows first */}\n                {block.headerRows.map((row, headerRowIndex) => (\n                  <div key={`header-${headerRowIndex}`} className=\"header-row\">\n                    {row.slice(0, displayColCount).map((cell, cellIndex) => {\n                      let cellValue = '';\n                      let comment = '';\n                      if (cell && typeof cell === 'object' && 'value' in cell) {\n                        cellValue = cell.value !== undefined ? String(cell.value) : '';\n                        comment = cell.comment || '';\n                      } else {\n                        cellValue = cell !== undefined ? String(cell) : '';\n                      }\n                      return (\n                        <div \n                          key={cellIndex} \n                          className=\"cell header-cell\" \n                          onClick={() => comment && handleCellClick(blockIndex, headerRowIndex, cellIndex, comment)}\n                        >\n                          <span className=\"cell-content\">{cellValue}</span>\n                          {comment && <span className=\"comment-indicator\" title=\"Has comment\">•</span>}\n                          {visibleComment &&\n                           visibleComment.blockIndex === blockIndex &&\n                           visibleComment.rowIndex === headerRowIndex &&\n                           visibleComment.cellIndex === cellIndex && (\n                            <div className=\"comment-tooltip\">\n                              {visibleComment.comment}\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                ))}\n                \n                {/* Display the content rows with dividers between shifts */}\n                {block.contentRows.map((row, rowIndex) => {\n                  // Add a divider before rows that might be shift boundaries\n                  const isShiftBoundary = rowIndex > 0 && row[0] && \n                    (typeof row[0] === 'object' ? row[0].value : row[0]) && \n                    String(typeof row[0] === 'object' ? row[0].value : row[0]).trim() !== '';\n                  \n                  return (\n                    <React.Fragment key={rowIndex}>\n                      {isShiftBoundary && <hr className=\"shift-divider\" />}\n                      <div className=\"shift-row\">\n                        {row.slice(0, displayColCount).map((cell, cellIndex) => {\n                          let cellValue = '';\n                          let comment = '';\n                          if (cell && typeof cell === 'object' && 'value' in cell) {\n                            cellValue = cell.value !== undefined ? String(cell.value) : '';\n                            comment = cell.comment || '';\n                          } else {\n                            cellValue = cell !== undefined ? String(cell) : '';\n                          }\n                          return (\n                            <div \n                              key={cellIndex} \n                              className=\"cell\" \n                              onClick={() => comment && handleCellClick(blockIndex, rowIndex, cellIndex, comment)}\n                            >\n                              <span className=\"cell-content\">{cellValue}</span>\n                              {comment && <span className=\"comment-indicator\" title=\"Has comment\">•</span>}\n                              {visibleComment &&\n                               visibleComment.blockIndex === blockIndex &&\n                               visibleComment.rowIndex === rowIndex &&\n                               visibleComment.cellIndex === cellIndex && (\n                                <div className=\"comment-tooltip\">\n                                  {visibleComment.comment}\n                                </div>\n                              )}\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </React.Fragment>\n                  );\n                })}\n              </div>\n              {blockIndex < shiftBlocks.length - 1 && <hr className=\"block-divider\" />}\n            </div>\n          );\n        })\n      ) : (\n        <div>\n          <div>No shift data available for this week</div>\n          <div className=\"debug-info\">\n            <p>Debug Info:</p>\n            <p>Week Header: {weekHeader}</p>\n            <p>Available Rows: {allRows.length}</p>\n            <p>Shift Blocks Found: {shiftBlocks.length}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default RosterView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}