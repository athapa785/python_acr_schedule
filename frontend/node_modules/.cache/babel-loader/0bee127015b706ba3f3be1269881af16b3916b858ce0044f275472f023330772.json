{"ast":null,"code":"var _jsxFileName = \"/Users/aaditya/Documents/GitHub/python_acr_schedule/frontend/src/components/RosterView.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/RosterView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RosterView({\n  sheet,\n  currentWeekIndex = 0\n}) {\n  _s();\n  // Display only the first 8 columns.\n  const displayColCount = 8;\n  const [visibleComment, setVisibleComment] = useState(null);\n\n  // For this specific Excel format, we'll create a custom grouping function\n  // Group rows by shift type (Owl, Day, Swing)\n  const groupByShift = rows => {\n    console.log('Grouping data, total rows:', rows.length);\n    if (rows.length === 0) {\n      return [];\n    }\n\n    // First, find the header rows (days of week, dates)\n    let headerStartRow = -1;\n    let daysOfWeekRow = -1;\n\n    // Look for the row with days of the week (Mon, Tues, Wed, etc.)\n    for (let i = 0; i < Math.min(10, rows.length); i++) {\n      const row = rows[i];\n      let dayCount = 0;\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n\n        // Check for days of week\n        if (['Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat', 'Sun'].includes(cellStr)) {\n          dayCount++;\n        }\n      }\n      if (dayCount >= 3) {\n        // If we found at least 3 days of the week\n        daysOfWeekRow = i;\n        console.log('Found days of week row at index', i);\n        break;\n      }\n    }\n    if (daysOfWeekRow === -1) {\n      console.log('Could not find days of week row');\n      // Just return all non-empty rows as one block\n      const nonEmptyRows = rows.filter(row => row.some(cell => {\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        return cellValue !== null && cellValue !== undefined && cellValue !== '';\n      }));\n      if (nonEmptyRows.length > 0) {\n        return [nonEmptyRows];\n      }\n      return [];\n    }\n\n    // Now find the row with \"Meal Periods\" which is typically the start of the schedule data\n    // We'll still use this to identify the structure, but we won't display it\n    let mealPeriodRowIndex = -1;\n    for (let i = daysOfWeekRow; i < Math.min(daysOfWeekRow + 5, rows.length); i++) {\n      const row = rows[i];\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n        if (cellStr === 'Meal Periods') {\n          console.log('Found Meal Periods row at index', i);\n          mealPeriodRowIndex = i;\n          break;\n        }\n      }\n      if (mealPeriodRowIndex !== -1) break;\n    }\n\n    // If we found days of week but not meal periods, just use the days of week row + 1\n    if (mealPeriodRowIndex === -1) {\n      mealPeriodRowIndex = daysOfWeekRow + 1;\n      console.log('Using row after days of week as start of data:', mealPeriodRowIndex);\n    }\n\n    // The header rows include the days of week row and the meal periods row\n    const headerRows = rows.slice(Math.max(0, daysOfWeekRow), mealPeriodRowIndex + 1);\n    console.log('Header rows:', headerRows.length);\n\n    // Now look for shift blocks after the meal periods row\n    // For this schedule, we'll look for specific shift names (Owl, Day, Swing)\n    // and group them into separate cards\n    const blocks = [];\n    let currentBlock = [];\n    let blockStarted = false;\n    let currentShift = 'Schedule';\n\n    // Define shift types to look for\n    const shiftTypes = ['Owl Shift', 'Day Shift', 'Swing Shift'];\n    for (let i = mealPeriodRowIndex; i < rows.length; i++) {\n      const row = rows[i];\n\n      // Check if this row has a time pattern or content in the first column\n      let hasTimePattern = false;\n      let hasFirstColumnContent = false;\n      let potentialShiftName = '';\n\n      // Check first column for content that might be a shift name\n      const firstCell = row[0] && (typeof row[0] === 'object' ? row[0].value : row[0]);\n      if (firstCell && String(firstCell).trim() !== '') {\n        hasFirstColumnContent = true;\n        potentialShiftName = String(firstCell);\n      }\n\n      // Check if any cell has a time pattern\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n\n        // Check for time patterns like \"XX:XX - XX:XX\"\n        if (cellStr.match(/\\d{1,2}:\\d{2}\\s*-\\s*\\d{1,2}:\\d{2}/)) {\n          hasTimePattern = true;\n          break;\n        }\n      }\n\n      // If this row contains one of our shift types, start a new shift block\n      const isShiftType = shiftTypes.some(type => potentialShiftName.includes(type));\n      if (hasFirstColumnContent && (isShiftType || !hasTimePattern && potentialShiftName.length > 3)) {\n        // This could be a new shift header\n        if (blockStarted && currentBlock.length > 0) {\n          // End the previous block\n          blocks.push({\n            shiftName: currentShift,\n            headerRows: headerRows,\n            contentRows: currentBlock\n          });\n        }\n\n        // Start a new block\n        currentShift = potentialShiftName;\n        currentBlock = [];\n        blockStarted = true;\n        console.log('Found potential shift:', currentShift);\n      }\n      // If this row has a time pattern or other content, add it to the current block\n      else if ((hasTimePattern || hasFirstColumnContent) && blockStarted) {\n        currentBlock.push(row);\n      }\n      // Empty rows or rows without relevant content are ignored\n    }\n\n    // Add the last block if it exists\n    if (blockStarted && currentBlock.length > 0) {\n      blocks.push({\n        shiftName: currentShift,\n        headerRows: headerRows,\n        contentRows: currentBlock\n      });\n    }\n\n    // If we didn't find any blocks but have header rows, create a default block\n    if (blocks.length === 0 && headerRows.length > 0) {\n      // Find all non-empty rows after the header\n      const contentRows = rows.slice(mealPeriodRowIndex + 1).filter(row => {\n        return row.some(cell => {\n          const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n          return cellValue !== null && cellValue !== undefined && cellValue !== '';\n        });\n      });\n      if (contentRows.length > 0) {\n        blocks.push({\n          shiftName: 'Schedule',\n          headerRows: headerRows,\n          contentRows: contentRows\n        });\n      }\n    }\n    console.log('Found', blocks.length, 'shift blocks');\n    return blocks;\n  };\n  if (!sheet) {\n    console.error('No sheet data provided to RosterView');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available for this week\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 12\n    }, this);\n  }\n  console.log('RosterView received sheet:', sheet);\n\n  // We're now directly using the sheet.data from the API\n  const allRows = sheet.data || [];\n  console.log('Total rows in sheet:', allRows.length);\n\n  // Find the title row (usually contains \"Operations Shift Schedule\")\n  let titleRow = null;\n  let weekHeader = 'Weekly Operations Shift Schedule';\n  for (let i = 0; i < Math.min(10, allRows.length); i++) {\n    const row = allRows[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n      if (cellValue && String(cellValue).includes('Operations Shift Schedule')) {\n        titleRow = row;\n        weekHeader = String(cellValue);\n        console.log('Found title row at index', i, ':', weekHeader);\n        break;\n      }\n    }\n    if (titleRow) break;\n  }\n\n  // Find date range if available and format it as MM-DD-YYYY\n  let dateRange = '';\n  if (titleRow && allRows.length > allRows.indexOf(titleRow) + 1) {\n    const nextRow = allRows[allRows.indexOf(titleRow) + 1];\n    for (let j = 0; j < nextRow.length; j++) {\n      const cell = nextRow[j];\n      const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n      if (cellValue && String(cellValue).includes('through')) {\n        const startDate = nextRow[j - 1] && (typeof nextRow[j - 1] === 'object' ? nextRow[j - 1].value : nextRow[j - 1]);\n        const endDate = nextRow[j + 1] && (typeof nextRow[j + 1] === 'object' ? nextRow[j + 1].value : nextRow[j + 1]);\n        if (startDate && endDate) {\n          // Format dates as MM-DD-YYYY, removing the T00:00:00 part\n          const formatDate = dateStr => {\n            if (!dateStr) return '';\n            const dateOnly = String(dateStr).split('T')[0]; // Remove the T00:00:00 part\n            const parts = dateOnly.split('-');\n            if (parts.length === 3) {\n              return `${parts[1]}-${parts[2]}-${parts[0]}`; // MM-DD-YYYY\n            }\n            return dateStr;\n          };\n          dateRange = `${formatDate(startDate)} through ${formatDate(endDate)}`;\n          console.log('Found date range:', dateRange);\n        }\n        break;\n      }\n    }\n  }\n\n  // Format dates as MM-DD, removing the year and T00:00:00 part\n  const formatDate = dateStr => {\n    if (!dateStr) return '';\n    const dateOnly = String(dateStr).split('T')[0]; // Remove the T00:00:00 part\n    const parts = dateOnly.split('-');\n    if (parts.length === 3) {\n      return `${parts[1]}-${parts[2]}`; // MM-DD format\n    }\n    return dateStr;\n  };\n\n  // Find week separators to split the data into weeks\n  const findWeekSeparators = rows => {\n    const separators = [];\n\n    // Look for rows that might indicate the start of a week\n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        if (cellValue && String(cellValue).includes('Operations Shift Schedule')) {\n          separators.push(i);\n          break;\n        }\n      }\n    }\n\n    // If no separators found, treat the whole sheet as one week\n    if (separators.length === 0) {\n      separators.push(0);\n    }\n    return separators;\n  };\n\n  // Extract date range for the current week\n  const extractDateRange = rows => {\n    // Look for date cells in the first few rows\n    for (let i = 0; i < Math.min(10, rows.length); i++) {\n      const row = rows[i];\n      const dates = [];\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n\n        // Check if this is a date in the format YYYY-MM-DDT00:00:00\n        if (cellStr.match(/\\d{4}-\\d{2}-\\d{2}T00:00:00/)) {\n          dates.push(cellStr);\n        }\n      }\n\n      // If we found at least 2 dates, use them for the range\n      if (dates.length >= 2) {\n        const startDate = formatDate(dates[0]);\n        const endDate = formatDate(dates[dates.length - 1]);\n        return `${startDate} through ${endDate}`;\n      }\n    }\n    return '';\n  };\n\n  // Get the week separators\n  const weekSeparators = findWeekSeparators(allRows);\n\n  // Determine the start and end rows for the current week\n  const weekStartRow = weekSeparators[currentWeekIndex] || 0;\n  const weekEndRow = weekSeparators[currentWeekIndex + 1] || allRows.length;\n\n  // Get only the rows for the current week\n  const currentWeekRows = allRows.slice(weekStartRow, weekEndRow);\n\n  // Extract date range for the current week\n  const currentWeekDateRange = extractDateRange(currentWeekRows);\n\n  // Process the current week's rows and create separate blocks for each shift type\n  let allShiftBlocks = groupByShift(currentWeekRows);\n\n  // Split blocks by shift type (Owl, Day, Swing)\n  const shiftTypes = ['Owl Shift', 'Day Shift', 'Swing Shift'];\n  const shiftBlocks = [];\n\n  // If we have at least one block, try to split it by shift types\n  if (allShiftBlocks.length > 0) {\n    const mainBlock = allShiftBlocks[0];\n    const headerRows = mainBlock.headerRows;\n\n    // Find shift type boundaries in the content rows\n    const shiftBoundaries = [];\n    mainBlock.contentRows.forEach((row, index) => {\n      // Check if this row contains a shift type name\n      const hasShiftType = row.some(cell => {\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        return cellValue && shiftTypes.some(type => String(cellValue).includes(type));\n      });\n      if (hasShiftType) {\n        shiftBoundaries.push(index);\n      }\n    });\n\n    // Add the end boundary\n    shiftBoundaries.push(mainBlock.contentRows.length);\n\n    // Create separate blocks for each shift type\n    if (shiftBoundaries.length > 1) {\n      for (let i = 0; i < shiftBoundaries.length - 1; i++) {\n        const startIdx = shiftBoundaries[i];\n        const endIdx = shiftBoundaries[i + 1];\n        const shiftRows = mainBlock.contentRows.slice(startIdx, endIdx);\n\n        // Only create a block if there are rows\n        if (shiftRows.length > 0) {\n          shiftBlocks.push({\n            headerRows: headerRows,\n            contentRows: shiftRows,\n            shiftName: getShiftName(shiftRows[0])\n          });\n        }\n      }\n    } else {\n      // If we couldn't find shift boundaries, just use the original block\n      shiftBlocks.push(mainBlock);\n    }\n  }\n\n  // Helper function to extract shift name from a row\n  function getShiftName(row) {\n    for (const cell of row) {\n      const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n      if (cellValue) {\n        const strValue = String(cellValue);\n        for (const type of shiftTypes) {\n          if (strValue.includes(type)) {\n            return type;\n          }\n        }\n      }\n    }\n    return 'Schedule';\n  }\n  const handleCellClick = (blockIndex, rowIndex, cellIndex, comment) => {\n    setVisibleComment({\n      blockIndex,\n      rowIndex,\n      cellIndex,\n      comment\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roster-view\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"week-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: weekHeader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this), dateRange && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-range\",\n        children: dateRange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this), shiftBlocks.length > 0 ?\n    // We have shift blocks to display\n    shiftBlocks.map((block, blockIndex) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shift-block shift-card\",\n        children: [block.shiftName && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"shift-title\",\n          children: block.shiftName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 35\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"shift-content\",\n          children: [block.headerRows.map((row, headerRowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-row\",\n            children: row.slice(0, displayColCount).map((cell, cellIndex) => {\n              let cellValue = '';\n              let comment = '';\n              if (cell && typeof cell === 'object' && 'value' in cell) {\n                cellValue = cell.value !== undefined ? String(cell.value) : '';\n                comment = cell.comment || '';\n              } else {\n                cellValue = cell !== undefined ? String(cell) : '';\n              }\n\n              // Format dates as MM-DD (removing the year and time)\n              if (cellValue && cellValue.match(/\\d{4}-\\d{2}-\\d{2}T00:00:00/)) {\n                const dateParts = cellValue.split('T')[0].split('-');\n                if (dateParts.length === 3) {\n                  cellValue = `${dateParts[1]}-${dateParts[2]}`; // MM-DD format\n                }\n              }\n\n              // Skip the Meal Periods cell\n              if (cellValue === 'Meal Periods') {\n                return null;\n              }\n\n              // Only skip the first column\n              if (cellIndex === 0) {\n                return null;\n              }\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell header-cell\",\n                onClick: () => comment && handleCellClick(blockIndex, headerRowIndex, cellIndex, comment),\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"cell-content\",\n                  children: cellValue\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 450,\n                  columnNumber: 27\n                }, this), comment && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"comment-indicator\",\n                  title: \"Has comment\",\n                  children: \"\\u2022\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 451,\n                  columnNumber: 39\n                }, this), visibleComment && visibleComment.blockIndex === blockIndex && visibleComment.rowIndex === headerRowIndex && visibleComment.cellIndex === cellIndex && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"comment-tooltip\",\n                  children: visibleComment.comment\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 456,\n                  columnNumber: 29\n                }, this)]\n              }, cellIndex, true, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 25\n              }, this);\n            })\n          }, `header-${headerRowIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 19\n          }, this)), block.contentRows.map((row, rowIndex) => {\n            // Add a divider before rows that might be shift boundaries\n            const isShiftBoundary = rowIndex > 0 && row[0] && (typeof row[0] === 'object' ? row[0].value : row[0]) && String(typeof row[0] === 'object' ? row[0].value : row[0]).trim() !== '';\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [isShiftBoundary && /*#__PURE__*/_jsxDEV(\"hr\", {\n                className: \"shift-divider\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 43\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"shift-row\",\n                children: row.slice(0, displayColCount).map((cell, cellIndex) => {\n                  let cellValue = '';\n                  let comment = '';\n                  if (cell && typeof cell === 'object' && 'value' in cell) {\n                    cellValue = cell.value !== undefined ? String(cell.value) : '';\n                    comment = cell.comment || '';\n                  } else {\n                    cellValue = cell !== undefined ? String(cell) : '';\n                  }\n\n                  // Format dates as MM-DD (removing the year and time)\n                  if (cellValue && cellValue.match(/\\d{4}-\\d{2}-\\d{2}T00:00:00/)) {\n                    const dateParts = cellValue.split('T')[0].split('-');\n                    if (dateParts.length === 3) {\n                      cellValue = `${dateParts[1]}-${dateParts[2]}`; // MM-DD format\n                    }\n                  }\n\n                  // Only skip the first column\n                  if (cellIndex === 0) {\n                    return null;\n                  }\n\n                  // Check if this is a shift name (Owl Shift, Day Shift, Swing Shift)\n                  const isShiftName = ['Owl Shift', 'Day Shift', 'Swing Shift'].includes(cellValue);\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"cell\",\n                    onClick: () => comment && handleCellClick(blockIndex, rowIndex, cellIndex, comment),\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: `cell-content ${isShiftName ? 'shift-name' : ''}`,\n                      children: cellValue\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 508,\n                      columnNumber: 31\n                    }, this), comment && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"comment-indicator\",\n                      title: \"Has comment\",\n                      children: \"\\u2022\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 509,\n                      columnNumber: 43\n                    }, this), visibleComment && visibleComment.blockIndex === blockIndex && visibleComment.rowIndex === rowIndex && visibleComment.cellIndex === cellIndex && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"comment-tooltip\",\n                      children: visibleComment.comment\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 514,\n                      columnNumber: 33\n                    }, this)]\n                  }, cellIndex, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 503,\n                    columnNumber: 29\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 23\n              }, this)]\n            }, rowIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 21\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 15\n        }, this), blockIndex < shiftBlocks.length - 1 && /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"block-divider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 55\n        }, this)]\n      }, blockIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 13\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No shift data available for this week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Debug Info:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Week Header: \", weekHeader]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Available Rows: \", allRows.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Shift Blocks Found: \", shiftBlocks.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 5\n  }, this);\n}\n_s(RosterView, \"ZQzGhEeTE/nZZ9dFgdtTVkYVobY=\");\n_c = RosterView;\nexport default RosterView;\nvar _c;\n$RefreshReg$(_c, \"RosterView\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","RosterView","sheet","currentWeekIndex","_s","displayColCount","visibleComment","setVisibleComment","groupByShift","rows","console","log","length","headerStartRow","daysOfWeekRow","i","Math","min","row","dayCount","j","cell","cellValue","value","cellStr","undefined","String","includes","nonEmptyRows","filter","some","mealPeriodRowIndex","headerRows","slice","max","blocks","currentBlock","blockStarted","currentShift","shiftTypes","hasTimePattern","hasFirstColumnContent","potentialShiftName","firstCell","trim","match","isShiftType","type","push","shiftName","contentRows","error","children","fileName","_jsxFileName","lineNumber","columnNumber","allRows","data","titleRow","weekHeader","dateRange","indexOf","nextRow","startDate","endDate","formatDate","dateStr","dateOnly","split","parts","findWeekSeparators","separators","extractDateRange","dates","weekSeparators","weekStartRow","weekEndRow","currentWeekRows","currentWeekDateRange","allShiftBlocks","shiftBlocks","mainBlock","shiftBoundaries","forEach","index","hasShiftType","startIdx","endIdx","shiftRows","getShiftName","strValue","handleCellClick","blockIndex","rowIndex","cellIndex","comment","className","map","block","headerRowIndex","dateParts","onClick","title","isShiftBoundary","Fragment","isShiftName","_c","$RefreshReg$"],"sources":["/Users/aaditya/Documents/GitHub/python_acr_schedule/frontend/src/components/RosterView.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../styles/RosterView.css';\n\nfunction RosterView({ sheet, currentWeekIndex = 0 }) {\n  // Display only the first 8 columns.\n  const displayColCount = 8;\n  const [visibleComment, setVisibleComment] = useState(null);\n\n  // For this specific Excel format, we'll create a custom grouping function\n  // Group rows by shift type (Owl, Day, Swing)\n  const groupByShift = (rows) => {\n    console.log('Grouping data, total rows:', rows.length);\n    \n    if (rows.length === 0) {\n      return [];\n    }\n    \n    // First, find the header rows (days of week, dates)\n    let headerStartRow = -1;\n    let daysOfWeekRow = -1;\n    \n    // Look for the row with days of the week (Mon, Tues, Wed, etc.)\n    for (let i = 0; i < Math.min(10, rows.length); i++) {\n      const row = rows[i];\n      let dayCount = 0;\n      \n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n        \n        // Check for days of week\n        if (['Mon', 'Tues', 'Wed', 'Thurs', 'Fri', 'Sat', 'Sun'].includes(cellStr)) {\n          dayCount++;\n        }\n      }\n      \n      if (dayCount >= 3) { // If we found at least 3 days of the week\n        daysOfWeekRow = i;\n        console.log('Found days of week row at index', i);\n        break;\n      }\n    }\n    \n    if (daysOfWeekRow === -1) {\n      console.log('Could not find days of week row');\n      // Just return all non-empty rows as one block\n      const nonEmptyRows = rows.filter(row => row.some(cell => {\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        return cellValue !== null && cellValue !== undefined && cellValue !== '';\n      }));\n      \n      if (nonEmptyRows.length > 0) {\n        return [nonEmptyRows];\n      }\n      return [];\n    }\n    \n    // Now find the row with \"Meal Periods\" which is typically the start of the schedule data\n    // We'll still use this to identify the structure, but we won't display it\n    let mealPeriodRowIndex = -1;\n    for (let i = daysOfWeekRow; i < Math.min(daysOfWeekRow + 5, rows.length); i++) {\n      const row = rows[i];\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n        \n        if (cellStr === 'Meal Periods') {\n          console.log('Found Meal Periods row at index', i);\n          mealPeriodRowIndex = i;\n          break;\n        }\n      }\n      if (mealPeriodRowIndex !== -1) break;\n    }\n    \n    // If we found days of week but not meal periods, just use the days of week row + 1\n    if (mealPeriodRowIndex === -1) {\n      mealPeriodRowIndex = daysOfWeekRow + 1;\n      console.log('Using row after days of week as start of data:', mealPeriodRowIndex);\n    }\n    \n    // The header rows include the days of week row and the meal periods row\n    const headerRows = rows.slice(Math.max(0, daysOfWeekRow), mealPeriodRowIndex + 1);\n    console.log('Header rows:', headerRows.length);\n    \n    // Now look for shift blocks after the meal periods row\n    // For this schedule, we'll look for specific shift names (Owl, Day, Swing)\n    // and group them into separate cards\n    const blocks = [];\n    let currentBlock = [];\n    let blockStarted = false;\n    let currentShift = 'Schedule';\n    \n    // Define shift types to look for\n    const shiftTypes = ['Owl Shift', 'Day Shift', 'Swing Shift'];\n    \n    for (let i = mealPeriodRowIndex; i < rows.length; i++) {\n      const row = rows[i];\n      \n      // Check if this row has a time pattern or content in the first column\n      let hasTimePattern = false;\n      let hasFirstColumnContent = false;\n      let potentialShiftName = '';\n      \n      // Check first column for content that might be a shift name\n      const firstCell = row[0] && (typeof row[0] === 'object' ? row[0].value : row[0]);\n      if (firstCell && String(firstCell).trim() !== '') {\n        hasFirstColumnContent = true;\n        potentialShiftName = String(firstCell);\n      }\n      \n      // Check if any cell has a time pattern\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n        \n        // Check for time patterns like \"XX:XX - XX:XX\"\n        if (cellStr.match(/\\d{1,2}:\\d{2}\\s*-\\s*\\d{1,2}:\\d{2}/)) {\n          hasTimePattern = true;\n          break;\n        }\n      }\n      \n      // If this row contains one of our shift types, start a new shift block\n      const isShiftType = shiftTypes.some(type => potentialShiftName.includes(type));\n      if (hasFirstColumnContent && (isShiftType || (!hasTimePattern && potentialShiftName.length > 3))) {\n        // This could be a new shift header\n        if (blockStarted && currentBlock.length > 0) {\n          // End the previous block\n          blocks.push({\n            shiftName: currentShift,\n            headerRows: headerRows,\n            contentRows: currentBlock\n          });\n        }\n        \n        // Start a new block\n        currentShift = potentialShiftName;\n        currentBlock = [];\n        blockStarted = true;\n        console.log('Found potential shift:', currentShift);\n      } \n      // If this row has a time pattern or other content, add it to the current block\n      else if ((hasTimePattern || hasFirstColumnContent) && blockStarted) {\n        currentBlock.push(row);\n      }\n      // Empty rows or rows without relevant content are ignored\n    }\n    \n    // Add the last block if it exists\n    if (blockStarted && currentBlock.length > 0) {\n      blocks.push({\n        shiftName: currentShift,\n        headerRows: headerRows,\n        contentRows: currentBlock\n      });\n    }\n    \n    // If we didn't find any blocks but have header rows, create a default block\n    if (blocks.length === 0 && headerRows.length > 0) {\n      // Find all non-empty rows after the header\n      const contentRows = rows.slice(mealPeriodRowIndex + 1).filter(row => {\n        return row.some(cell => {\n          const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n          return cellValue !== null && cellValue !== undefined && cellValue !== '';\n        });\n      });\n      \n      if (contentRows.length > 0) {\n        blocks.push({\n          shiftName: 'Schedule',\n          headerRows: headerRows,\n          contentRows: contentRows\n        });\n      }\n    }\n    \n    console.log('Found', blocks.length, 'shift blocks');\n    return blocks;\n  };\n\n  if (!sheet) {\n    console.error('No sheet data provided to RosterView');\n    return <div>No data available for this week</div>;\n  }\n  \n  console.log('RosterView received sheet:', sheet);\n  \n  // We're now directly using the sheet.data from the API\n  const allRows = sheet.data || [];\n  console.log('Total rows in sheet:', allRows.length);\n  \n  // Find the title row (usually contains \"Operations Shift Schedule\")\n  let titleRow = null;\n  let weekHeader = 'Weekly Operations Shift Schedule';\n  \n  for (let i = 0; i < Math.min(10, allRows.length); i++) {\n    const row = allRows[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n      if (cellValue && String(cellValue).includes('Operations Shift Schedule')) {\n        titleRow = row;\n        weekHeader = String(cellValue);\n        console.log('Found title row at index', i, ':', weekHeader);\n        break;\n      }\n    }\n    if (titleRow) break;\n  }\n  \n  // Find date range if available and format it as MM-DD-YYYY\n  let dateRange = '';\n  if (titleRow && allRows.length > allRows.indexOf(titleRow) + 1) {\n    const nextRow = allRows[allRows.indexOf(titleRow) + 1];\n    for (let j = 0; j < nextRow.length; j++) {\n      const cell = nextRow[j];\n      const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n      if (cellValue && String(cellValue).includes('through')) {\n        const startDate = nextRow[j-1] && (typeof nextRow[j-1] === 'object' ? nextRow[j-1].value : nextRow[j-1]);\n        const endDate = nextRow[j+1] && (typeof nextRow[j+1] === 'object' ? nextRow[j+1].value : nextRow[j+1]);\n        if (startDate && endDate) {\n          // Format dates as MM-DD-YYYY, removing the T00:00:00 part\n          const formatDate = (dateStr) => {\n            if (!dateStr) return '';\n            const dateOnly = String(dateStr).split('T')[0]; // Remove the T00:00:00 part\n            const parts = dateOnly.split('-');\n            if (parts.length === 3) {\n              return `${parts[1]}-${parts[2]}-${parts[0]}`; // MM-DD-YYYY\n            }\n            return dateStr;\n          };\n          \n          dateRange = `${formatDate(startDate)} through ${formatDate(endDate)}`;\n          console.log('Found date range:', dateRange);\n        }\n        break;\n      }\n    }\n  }\n  \n  // Format dates as MM-DD, removing the year and T00:00:00 part\n  const formatDate = (dateStr) => {\n    if (!dateStr) return '';\n    const dateOnly = String(dateStr).split('T')[0]; // Remove the T00:00:00 part\n    const parts = dateOnly.split('-');\n    if (parts.length === 3) {\n      return `${parts[1]}-${parts[2]}`; // MM-DD format\n    }\n    return dateStr;\n  };\n  \n  // Find week separators to split the data into weeks\n  const findWeekSeparators = (rows) => {\n    const separators = [];\n    \n    // Look for rows that might indicate the start of a week\n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        if (cellValue && String(cellValue).includes('Operations Shift Schedule')) {\n          separators.push(i);\n          break;\n        }\n      }\n    }\n    \n    // If no separators found, treat the whole sheet as one week\n    if (separators.length === 0) {\n      separators.push(0);\n    }\n    \n    return separators;\n  };\n  \n  // Extract date range for the current week\n  const extractDateRange = (rows) => {\n    // Look for date cells in the first few rows\n    for (let i = 0; i < Math.min(10, rows.length); i++) {\n      const row = rows[i];\n      const dates = [];\n      \n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n        \n        // Check if this is a date in the format YYYY-MM-DDT00:00:00\n        if (cellStr.match(/\\d{4}-\\d{2}-\\d{2}T00:00:00/)) {\n          dates.push(cellStr);\n        }\n      }\n      \n      // If we found at least 2 dates, use them for the range\n      if (dates.length >= 2) {\n        const startDate = formatDate(dates[0]);\n        const endDate = formatDate(dates[dates.length - 1]);\n        return `${startDate} through ${endDate}`;\n      }\n    }\n    \n    return '';\n  };\n  \n  // Get the week separators\n  const weekSeparators = findWeekSeparators(allRows);\n  \n  // Determine the start and end rows for the current week\n  const weekStartRow = weekSeparators[currentWeekIndex] || 0;\n  const weekEndRow = weekSeparators[currentWeekIndex + 1] || allRows.length;\n  \n  // Get only the rows for the current week\n  const currentWeekRows = allRows.slice(weekStartRow, weekEndRow);\n  \n  // Extract date range for the current week\n  const currentWeekDateRange = extractDateRange(currentWeekRows);\n  \n  // Process the current week's rows and create separate blocks for each shift type\n  let allShiftBlocks = groupByShift(currentWeekRows);\n  \n  // Split blocks by shift type (Owl, Day, Swing)\n  const shiftTypes = ['Owl Shift', 'Day Shift', 'Swing Shift'];\n  const shiftBlocks = [];\n  \n  // If we have at least one block, try to split it by shift types\n  if (allShiftBlocks.length > 0) {\n    const mainBlock = allShiftBlocks[0];\n    const headerRows = mainBlock.headerRows;\n    \n    // Find shift type boundaries in the content rows\n    const shiftBoundaries = [];\n    mainBlock.contentRows.forEach((row, index) => {\n      // Check if this row contains a shift type name\n      const hasShiftType = row.some(cell => {\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        return cellValue && shiftTypes.some(type => String(cellValue).includes(type));\n      });\n      \n      if (hasShiftType) {\n        shiftBoundaries.push(index);\n      }\n    });\n    \n    // Add the end boundary\n    shiftBoundaries.push(mainBlock.contentRows.length);\n    \n    // Create separate blocks for each shift type\n    if (shiftBoundaries.length > 1) {\n      for (let i = 0; i < shiftBoundaries.length - 1; i++) {\n        const startIdx = shiftBoundaries[i];\n        const endIdx = shiftBoundaries[i + 1];\n        const shiftRows = mainBlock.contentRows.slice(startIdx, endIdx);\n        \n        // Only create a block if there are rows\n        if (shiftRows.length > 0) {\n          shiftBlocks.push({\n            headerRows: headerRows,\n            contentRows: shiftRows,\n            shiftName: getShiftName(shiftRows[0])\n          });\n        }\n      }\n    } else {\n      // If we couldn't find shift boundaries, just use the original block\n      shiftBlocks.push(mainBlock);\n    }\n  }\n  \n  // Helper function to extract shift name from a row\n  function getShiftName(row) {\n    for (const cell of row) {\n      const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n      if (cellValue) {\n        const strValue = String(cellValue);\n        for (const type of shiftTypes) {\n          if (strValue.includes(type)) {\n            return type;\n          }\n        }\n      }\n    }\n    return 'Schedule';\n  }\n\n  const handleCellClick = (blockIndex, rowIndex, cellIndex, comment) => {\n    setVisibleComment({\n      blockIndex,\n      rowIndex,\n      cellIndex,\n      comment\n    });\n  };\n\n  return (\n    <div className=\"roster-view\">\n      <div className=\"week-header\">\n        <h2>{weekHeader}</h2>\n        {dateRange && <div className=\"date-range\">{dateRange}</div>}\n      </div>\n      {shiftBlocks.length > 0 ? (\n        // We have shift blocks to display\n        shiftBlocks.map((block, blockIndex) => {\n          return (\n            <div key={blockIndex} className=\"shift-block shift-card\">\n              {block.shiftName && <h3 className=\"shift-title\">{block.shiftName}</h3>}\n              {/* No shift name header as requested */}\n              <div className=\"shift-content\">\n                {/* Display the header rows first */}\n                {block.headerRows.map((row, headerRowIndex) => (\n                  <div key={`header-${headerRowIndex}`} className=\"header-row\">\n                    {row.slice(0, displayColCount).map((cell, cellIndex) => {\n                      let cellValue = '';\n                      let comment = '';\n                      if (cell && typeof cell === 'object' && 'value' in cell) {\n                        cellValue = cell.value !== undefined ? String(cell.value) : '';\n                        comment = cell.comment || '';\n                      } else {\n                        cellValue = cell !== undefined ? String(cell) : '';\n                      }\n                      \n                      // Format dates as MM-DD (removing the year and time)\n                      if (cellValue && cellValue.match(/\\d{4}-\\d{2}-\\d{2}T00:00:00/)) {\n                        const dateParts = cellValue.split('T')[0].split('-');\n                        if (dateParts.length === 3) {\n                          cellValue = `${dateParts[1]}-${dateParts[2]}`; // MM-DD format\n                        }\n                      }\n                      \n                      // Skip the Meal Periods cell\n                      if (cellValue === 'Meal Periods') {\n                        return null;\n                      }\n                      \n                      // Only skip the first column\n                      if (cellIndex === 0) {\n                        return null;\n                      }\n                      \n                      return (\n                        <div \n                          key={cellIndex} \n                          className=\"cell header-cell\" \n                          onClick={() => comment && handleCellClick(blockIndex, headerRowIndex, cellIndex, comment)}\n                        >\n                          <span className=\"cell-content\">{cellValue}</span>\n                          {comment && <span className=\"comment-indicator\" title=\"Has comment\">•</span>}\n                          {visibleComment &&\n                           visibleComment.blockIndex === blockIndex &&\n                           visibleComment.rowIndex === headerRowIndex &&\n                           visibleComment.cellIndex === cellIndex && (\n                            <div className=\"comment-tooltip\">\n                              {visibleComment.comment}\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                ))}\n                \n                {/* Display the content rows with dividers between shifts */}\n                {block.contentRows.map((row, rowIndex) => {\n                  // Add a divider before rows that might be shift boundaries\n                  const isShiftBoundary = rowIndex > 0 && row[0] && \n                    (typeof row[0] === 'object' ? row[0].value : row[0]) && \n                    String(typeof row[0] === 'object' ? row[0].value : row[0]).trim() !== '';\n                  \n                  return (\n                    <React.Fragment key={rowIndex}>\n                      {isShiftBoundary && <hr className=\"shift-divider\" />}\n                      <div className=\"shift-row\">\n                        {row.slice(0, displayColCount).map((cell, cellIndex) => {\n                          let cellValue = '';\n                          let comment = '';\n                          if (cell && typeof cell === 'object' && 'value' in cell) {\n                            cellValue = cell.value !== undefined ? String(cell.value) : '';\n                            comment = cell.comment || '';\n                          } else {\n                            cellValue = cell !== undefined ? String(cell) : '';\n                          }\n                          \n                          // Format dates as MM-DD (removing the year and time)\n                          if (cellValue && cellValue.match(/\\d{4}-\\d{2}-\\d{2}T00:00:00/)) {\n                            const dateParts = cellValue.split('T')[0].split('-');\n                            if (dateParts.length === 3) {\n                              cellValue = `${dateParts[1]}-${dateParts[2]}`; // MM-DD format\n                            }\n                          }\n                          \n                          // Only skip the first column\n                          if (cellIndex === 0) {\n                            return null;\n                          }\n                          \n                          // Check if this is a shift name (Owl Shift, Day Shift, Swing Shift)\n                          const isShiftName = ['Owl Shift', 'Day Shift', 'Swing Shift'].includes(cellValue);\n                          return (\n                            <div \n                              key={cellIndex} \n                              className=\"cell\" \n                              onClick={() => comment && handleCellClick(blockIndex, rowIndex, cellIndex, comment)}\n                            >\n                              <span className={`cell-content ${isShiftName ? 'shift-name' : ''}`}>{cellValue}</span>\n                              {comment && <span className=\"comment-indicator\" title=\"Has comment\">•</span>}\n                              {visibleComment &&\n                               visibleComment.blockIndex === blockIndex &&\n                               visibleComment.rowIndex === rowIndex &&\n                               visibleComment.cellIndex === cellIndex && (\n                                <div className=\"comment-tooltip\">\n                                  {visibleComment.comment}\n                                </div>\n                              )}\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </React.Fragment>\n                  );\n                })}\n              </div>\n              {blockIndex < shiftBlocks.length - 1 && <hr className=\"block-divider\" />}\n            </div>\n          );\n        })\n      ) : (\n        <div>\n          <div>No shift data available for this week</div>\n          <div className=\"debug-info\">\n            <p>Debug Info:</p>\n            <p>Week Header: {weekHeader}</p>\n            <p>Available Rows: {allRows.length}</p>\n            <p>Shift Blocks Found: {shiftBlocks.length}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default RosterView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}