{"ast":null,"code":"var _jsxFileName = \"/Users/aaditya/Documents/GitHub/python_acr_schedule/frontend/src/components/RosterView.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/RosterView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RosterView({\n  sheet\n}) {\n  _s();\n  // Display only the first 8 columns.\n  const displayColCount = 8;\n  const [visibleComment, setVisibleComment] = useState(null);\n\n  // For this specific Excel format, we'll create a custom grouping function\n  const groupByShift = rows => {\n    console.log('Grouping data, total rows:', rows.length);\n    if (rows.length === 0) {\n      return [];\n    }\n\n    // Based on the API data structure, we know the schedule has a specific format\n    // First, find the row with \"Meal Periods\" which is the start of the schedule data\n    let mealPeriodRowIndex = -1;\n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n        if (cellStr === 'Meal Periods') {\n          console.log('Found Meal Periods row at index', i);\n          mealPeriodRowIndex = i;\n          break;\n        }\n      }\n      if (mealPeriodRowIndex !== -1) break;\n    }\n\n    // If we didn't find the meal periods row, try to create a meaningful display anyway\n    if (mealPeriodRowIndex === -1) {\n      console.log('Could not find Meal Periods row, using all data');\n      // Just return all non-empty rows as one block\n      const nonEmptyRows = rows.filter(row => row.some(cell => {\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        return cellValue !== null && cellValue !== undefined && cellValue !== '';\n      }));\n      if (nonEmptyRows.length > 0) {\n        return [nonEmptyRows];\n      }\n      return [];\n    }\n\n    // We found the meal periods row, now we can extract the schedule data\n    // The first block will be the header rows (days of week, dates)\n    const headerRows = rows.slice(Math.max(0, mealPeriodRowIndex - 2), mealPeriodRowIndex + 1);\n\n    // Now look for shift blocks after the meal periods row\n    const blocks = [];\n    let currentBlock = [];\n    let inBlock = false;\n    for (let i = mealPeriodRowIndex; i < rows.length; i++) {\n      const row = rows[i];\n\n      // Check if this row has content in the first few columns\n      const hasContent = row.slice(0, 3).some(cell => {\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        return cellValue !== null && cellValue !== undefined && cellValue !== '';\n      });\n      if (hasContent) {\n        // This could be a shift header or part of a shift block\n        if (!inBlock) {\n          // Start a new block\n          currentBlock = [row];\n          inBlock = true;\n        } else {\n          // Add to current block\n          currentBlock.push(row);\n        }\n      } else if (inBlock) {\n        // Empty row after a block - end the current block\n        if (currentBlock.length > 0) {\n          blocks.push([...headerRows, ...currentBlock]);\n        }\n        inBlock = false;\n        currentBlock = [];\n      }\n    }\n\n    // Add the last block if it exists\n    if (inBlock && currentBlock.length > 0) {\n      blocks.push([...headerRows, ...currentBlock]);\n    }\n\n    // If we didn't find any blocks, create one with all the data\n    if (blocks.length === 0) {\n      blocks.push([...headerRows, ...rows.slice(mealPeriodRowIndex + 1)]);\n    }\n    console.log('Found', blocks.length, 'data blocks');\n    return blocks;\n  };\n  if (!sheet) {\n    console.error('No sheet data provided to RosterView');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No data available for this week\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 12\n    }, this);\n  }\n  console.log('RosterView received sheet:', sheet);\n\n  // We're now directly using the sheet.data from the API\n  const allRows = sheet.data || [];\n  console.log('Total rows in sheet:', allRows.length);\n\n  // Find the title row (usually contains \"Operations Shift Schedule\")\n  let titleRow = null;\n  let weekHeader = 'Weekly Operations Shift Schedule';\n  for (let i = 0; i < Math.min(10, allRows.length); i++) {\n    const row = allRows[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n      if (cellValue && String(cellValue).includes('Operations Shift Schedule')) {\n        titleRow = row;\n        weekHeader = String(cellValue);\n        console.log('Found title row at index', i, ':', weekHeader);\n        break;\n      }\n    }\n    if (titleRow) break;\n  }\n\n  // Find date range if available\n  let dateRange = '';\n  if (titleRow && allRows.length > allRows.indexOf(titleRow) + 1) {\n    const nextRow = allRows[allRows.indexOf(titleRow) + 1];\n    for (let j = 0; j < nextRow.length; j++) {\n      const cell = nextRow[j];\n      const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n      if (cellValue && String(cellValue).includes('through')) {\n        const startDate = nextRow[j - 1] && (typeof nextRow[j - 1] === 'object' ? nextRow[j - 1].value : nextRow[j - 1]);\n        const endDate = nextRow[j + 1] && (typeof nextRow[j + 1] === 'object' ? nextRow[j + 1].value : nextRow[j + 1]);\n        if (startDate && endDate) {\n          dateRange = `${startDate} through ${endDate}`;\n          console.log('Found date range:', dateRange);\n        }\n        break;\n      }\n    }\n  }\n  const shiftBlocks = groupByShift(rowsToUse);\n  const handleCellClick = (blockIndex, rowIndex, cellIndex, comment) => {\n    setVisibleComment({\n      blockIndex,\n      rowIndex,\n      cellIndex,\n      comment\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"roster-view\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"week-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: weekHeader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), shiftBlocks.length > 0 ?\n    // We have shift blocks to display\n    shiftBlocks.map((block, blockIndex) => {\n      const shiftHeader = block[0] && (typeof block[0][0] === 'object' ? block[0][0].value : block[0][0]) || 'Shift';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shift-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"shift-header\",\n          children: shiftHeader\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"shift-content\",\n          children: block.slice(1).map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"shift-row\",\n            children: row.slice(0, displayColCount).map((cell, cellIndex) => {\n              let cellValue = '';\n              let comment = '';\n              if (cell && typeof cell === 'object' && 'value' in cell) {\n                cellValue = cell.value !== undefined ? String(cell.value) : '';\n                comment = cell.comment || '';\n              } else {\n                cellValue = cell !== undefined ? String(cell) : '';\n              }\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell\",\n                onClick: () => comment && handleCellClick(blockIndex, rowIndex, cellIndex, comment),\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"cell-content\",\n                  children: cellValue\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 27\n                }, this), comment && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"comment-indicator\",\n                  title: \"Has comment\",\n                  children: \"\\u2022\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 39\n                }, this), visibleComment && visibleComment.blockIndex === blockIndex && visibleComment.rowIndex === rowIndex && visibleComment.cellIndex === cellIndex && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"comment-tooltip\",\n                  children: visibleComment.comment\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 29\n                }, this)]\n              }, cellIndex, true, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 25\n              }, this);\n            })\n          }, rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }, this), blockIndex < shiftBlocks.length - 1 && /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"block-divider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 55\n        }, this)]\n      }, blockIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No shift data available for this week\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Debug Info:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Week Header: \", weekHeader]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Available Rows: \", rowsToUse.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Shift Blocks Found: \", shiftBlocks.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}\n_s(RosterView, \"ZQzGhEeTE/nZZ9dFgdtTVkYVobY=\");\n_c = RosterView;\nexport default RosterView;\nvar _c;\n$RefreshReg$(_c, \"RosterView\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","RosterView","sheet","_s","displayColCount","visibleComment","setVisibleComment","groupByShift","rows","console","log","length","mealPeriodRowIndex","i","row","j","cell","cellValue","value","cellStr","undefined","String","nonEmptyRows","filter","some","headerRows","slice","Math","max","blocks","currentBlock","inBlock","hasContent","push","error","children","fileName","_jsxFileName","lineNumber","columnNumber","allRows","data","titleRow","weekHeader","min","includes","dateRange","indexOf","nextRow","startDate","endDate","shiftBlocks","rowsToUse","handleCellClick","blockIndex","rowIndex","cellIndex","comment","className","map","block","shiftHeader","onClick","title","_c","$RefreshReg$"],"sources":["/Users/aaditya/Documents/GitHub/python_acr_schedule/frontend/src/components/RosterView.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../styles/RosterView.css';\n\nfunction RosterView({ sheet }) {\n  // Display only the first 8 columns.\n  const displayColCount = 8;\n  const [visibleComment, setVisibleComment] = useState(null);\n\n  // For this specific Excel format, we'll create a custom grouping function\n  const groupByShift = (rows) => {\n    console.log('Grouping data, total rows:', rows.length);\n    \n    if (rows.length === 0) {\n      return [];\n    }\n    \n    // Based on the API data structure, we know the schedule has a specific format\n    // First, find the row with \"Meal Periods\" which is the start of the schedule data\n    let mealPeriodRowIndex = -1;\n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      for (let j = 0; j < row.length; j++) {\n        const cell = row[j];\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        const cellStr = cellValue !== null && cellValue !== undefined ? String(cellValue) : '';\n        \n        if (cellStr === 'Meal Periods') {\n          console.log('Found Meal Periods row at index', i);\n          mealPeriodRowIndex = i;\n          break;\n        }\n      }\n      if (mealPeriodRowIndex !== -1) break;\n    }\n    \n    // If we didn't find the meal periods row, try to create a meaningful display anyway\n    if (mealPeriodRowIndex === -1) {\n      console.log('Could not find Meal Periods row, using all data');\n      // Just return all non-empty rows as one block\n      const nonEmptyRows = rows.filter(row => row.some(cell => {\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        return cellValue !== null && cellValue !== undefined && cellValue !== '';\n      }));\n      \n      if (nonEmptyRows.length > 0) {\n        return [nonEmptyRows];\n      }\n      return [];\n    }\n    \n    // We found the meal periods row, now we can extract the schedule data\n    // The first block will be the header rows (days of week, dates)\n    const headerRows = rows.slice(Math.max(0, mealPeriodRowIndex - 2), mealPeriodRowIndex + 1);\n    \n    // Now look for shift blocks after the meal periods row\n    const blocks = [];\n    let currentBlock = [];\n    let inBlock = false;\n    \n    for (let i = mealPeriodRowIndex; i < rows.length; i++) {\n      const row = rows[i];\n      \n      // Check if this row has content in the first few columns\n      const hasContent = row.slice(0, 3).some(cell => {\n        const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n        return cellValue !== null && cellValue !== undefined && cellValue !== '';\n      });\n      \n      if (hasContent) {\n        // This could be a shift header or part of a shift block\n        if (!inBlock) {\n          // Start a new block\n          currentBlock = [row];\n          inBlock = true;\n        } else {\n          // Add to current block\n          currentBlock.push(row);\n        }\n      } else if (inBlock) {\n        // Empty row after a block - end the current block\n        if (currentBlock.length > 0) {\n          blocks.push([...headerRows, ...currentBlock]);\n        }\n        inBlock = false;\n        currentBlock = [];\n      }\n    }\n    \n    // Add the last block if it exists\n    if (inBlock && currentBlock.length > 0) {\n      blocks.push([...headerRows, ...currentBlock]);\n    }\n    \n    // If we didn't find any blocks, create one with all the data\n    if (blocks.length === 0) {\n      blocks.push([...headerRows, ...rows.slice(mealPeriodRowIndex + 1)]);\n    }\n    \n    console.log('Found', blocks.length, 'data blocks');\n    return blocks;\n  };\n\n  if (!sheet) {\n    console.error('No sheet data provided to RosterView');\n    return <div>No data available for this week</div>;\n  }\n  \n  console.log('RosterView received sheet:', sheet);\n  \n  // We're now directly using the sheet.data from the API\n  const allRows = sheet.data || [];\n  console.log('Total rows in sheet:', allRows.length);\n  \n  // Find the title row (usually contains \"Operations Shift Schedule\")\n  let titleRow = null;\n  let weekHeader = 'Weekly Operations Shift Schedule';\n  \n  for (let i = 0; i < Math.min(10, allRows.length); i++) {\n    const row = allRows[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n      if (cellValue && String(cellValue).includes('Operations Shift Schedule')) {\n        titleRow = row;\n        weekHeader = String(cellValue);\n        console.log('Found title row at index', i, ':', weekHeader);\n        break;\n      }\n    }\n    if (titleRow) break;\n  }\n  \n  // Find date range if available\n  let dateRange = '';\n  if (titleRow && allRows.length > allRows.indexOf(titleRow) + 1) {\n    const nextRow = allRows[allRows.indexOf(titleRow) + 1];\n    for (let j = 0; j < nextRow.length; j++) {\n      const cell = nextRow[j];\n      const cellValue = cell && (typeof cell === 'object' ? cell.value : cell);\n      if (cellValue && String(cellValue).includes('through')) {\n        const startDate = nextRow[j-1] && (typeof nextRow[j-1] === 'object' ? nextRow[j-1].value : nextRow[j-1]);\n        const endDate = nextRow[j+1] && (typeof nextRow[j+1] === 'object' ? nextRow[j+1].value : nextRow[j+1]);\n        if (startDate && endDate) {\n          dateRange = `${startDate} through ${endDate}`;\n          console.log('Found date range:', dateRange);\n        }\n        break;\n      }\n    }\n  }\n  \n  const shiftBlocks = groupByShift(rowsToUse);\n\n  const handleCellClick = (blockIndex, rowIndex, cellIndex, comment) => {\n    setVisibleComment({\n      blockIndex,\n      rowIndex,\n      cellIndex,\n      comment\n    });\n  };\n\n  return (\n    <div className=\"roster-view\">\n      <div className=\"week-header\">\n        <h2>{weekHeader}</h2>\n      </div>\n      {shiftBlocks.length > 0 ? (\n        // We have shift blocks to display\n        shiftBlocks.map((block, blockIndex) => {\n          const shiftHeader = block[0] && \n            (typeof block[0][0] === 'object' ? block[0][0].value : block[0][0]) || 'Shift';\n          return (\n            <div key={blockIndex} className=\"shift-block\">\n              <h3 className=\"shift-header\">{shiftHeader}</h3>\n              <div className=\"shift-content\">\n                {block.slice(1).map((row, rowIndex) => (\n                  <div key={rowIndex} className=\"shift-row\">\n                    {row.slice(0, displayColCount).map((cell, cellIndex) => {\n                      let cellValue = '';\n                      let comment = '';\n                      if (cell && typeof cell === 'object' && 'value' in cell) {\n                        cellValue = cell.value !== undefined ? String(cell.value) : '';\n                        comment = cell.comment || '';\n                      } else {\n                        cellValue = cell !== undefined ? String(cell) : '';\n                      }\n                      return (\n                        <div \n                          key={cellIndex} \n                          className=\"cell\" \n                          onClick={() => comment && handleCellClick(blockIndex, rowIndex, cellIndex, comment)}\n                        >\n                          <span className=\"cell-content\">{cellValue}</span>\n                          {comment && <span className=\"comment-indicator\" title=\"Has comment\">•</span>}\n                          {visibleComment &&\n                           visibleComment.blockIndex === blockIndex &&\n                           visibleComment.rowIndex === rowIndex &&\n                           visibleComment.cellIndex === cellIndex && (\n                            <div className=\"comment-tooltip\">\n                              {visibleComment.comment}\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                ))}\n              </div>\n              {blockIndex < shiftBlocks.length - 1 && <hr className=\"block-divider\" />}\n            </div>\n          );\n        })\n      ) : (\n        <div>\n          <div>No shift data available for this week</div>\n          <div className=\"debug-info\">\n            <p>Debug Info:</p>\n            <p>Week Header: {weekHeader}</p>\n            <p>Available Rows: {rowsToUse.length}</p>\n            <p>Shift Blocks Found: {shiftBlocks.length}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default RosterView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}