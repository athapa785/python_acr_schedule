{"ast":null,"code":"var _jsxFileName = \"/Users/aaditya/Documents/GitHub/python_acr_schedule/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport RosterView from './components/RosterView';\nimport Pagination from './components/Pagination';\nimport './styles/App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [scheduleData, setScheduleData] = useState(null);\n  const [currentWeekIndex, setCurrentWeekIndex] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // We're simplifying the approach - we'll just pass the raw data to the RosterView component\n\n  useEffect(() => {\n    const fetchSchedule = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        // Adjust the URL if your Django server is on a different host/port.\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n\n        try {\n          const response = await fetch(\"http://localhost:8000/api/schedule/\", {\n            signal: controller.signal\n          });\n          clearTimeout(timeoutId);\n          if (!response.ok) {\n            throw new Error(`Server error: ${response.status} ${response.statusText}`);\n          }\n          const data = await response.json();\n          console.log('API Response received');\n          if (data.sheets && data.sheets.length > 0) {\n            var _data$sheets$0$data;\n            console.log('First sheet found with', ((_data$sheets$0$data = data.sheets[0].data) === null || _data$sheets$0$data === void 0 ? void 0 : _data$sheets$0$data.length) || 0, 'rows');\n            setScheduleData(data.sheets[0]);\n            setCurrentWeekIndex(0);\n          } else {\n            console.error('No sheets in data');\n            setError(\"No sheets found in the schedule data\");\n          }\n        } catch (fetchErr) {\n          if (fetchErr.name === 'AbortError') {\n            throw new Error('Request timed out. Please check your connection and try again.');\n          }\n          throw fetchErr;\n        }\n      } catch (err) {\n        console.error('Error fetching schedule:', err);\n        setError(err.message || 'An unexpected error occurred');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSchedule();\n  }, []);\n\n  // For now, we'll keep these functions simple since we're not using week pagination yet\n  const goToNext = () => {\n    // We'll implement this when we have multiple weeks\n  };\n  const goToPrevious = () => {\n    // We'll implement this when we have multiple weeks\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weekly Operations Shift Schedule\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading schedule data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this), !loading && !error && scheduleData ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(RosterView, {\n        sheet: scheduleData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : !loading && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No schedule data found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KVx1AnM4ARQyQ3Pnk29iF2ykm9A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","RosterView","Pagination","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","scheduleData","setScheduleData","currentWeekIndex","setCurrentWeekIndex","loading","setLoading","error","setError","fetchSchedule","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","ok","Error","status","statusText","data","json","console","log","sheets","length","_data$sheets$0$data","fetchErr","name","err","message","goToNext","goToPrevious","className","children","fileName","_jsxFileName","lineNumber","columnNumber","sheet","_c","$RefreshReg$"],"sources":["/Users/aaditya/Documents/GitHub/python_acr_schedule/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport RosterView from './components/RosterView';\nimport Pagination from './components/Pagination';\nimport './styles/App.css';\n\nfunction App() {\n  const [scheduleData, setScheduleData] = useState(null);\n  const [currentWeekIndex, setCurrentWeekIndex] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // We're simplifying the approach - we'll just pass the raw data to the RosterView component\n\n  useEffect(() => {\n    const fetchSchedule = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        // Adjust the URL if your Django server is on a different host/port.\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n        \n        try {\n          const response = await fetch(\"http://localhost:8000/api/schedule/\", {\n            signal: controller.signal\n          });\n          clearTimeout(timeoutId);\n          \n          if (!response.ok) {\n            throw new Error(`Server error: ${response.status} ${response.statusText}`);\n          }\n          \n          const data = await response.json();\n          console.log('API Response received');\n          \n          if (data.sheets && data.sheets.length > 0) {\n            console.log('First sheet found with', data.sheets[0].data?.length || 0, 'rows');\n            setScheduleData(data.sheets[0]);\n            setCurrentWeekIndex(0);\n          } else {\n            console.error('No sheets in data');\n            setError(\"No sheets found in the schedule data\");\n          }\n        } catch (fetchErr) {\n          if (fetchErr.name === 'AbortError') {\n            throw new Error('Request timed out. Please check your connection and try again.');\n          }\n          throw fetchErr;\n        }\n      } catch (err) {\n        console.error('Error fetching schedule:', err);\n        setError(err.message || 'An unexpected error occurred');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSchedule();\n  }, []);\n\n  // For now, we'll keep these functions simple since we're not using week pagination yet\n  const goToNext = () => {\n    // We'll implement this when we have multiple weeks\n  };\n\n  const goToPrevious = () => {\n    // We'll implement this when we have multiple weeks\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Weekly Operations Shift Schedule</h1>\n      {loading && <div className=\"loading\">Loading schedule data...</div>}\n      {error && <div className=\"error\">Error: {error}</div>}\n      {(!loading && !error && scheduleData) ? (\n        <>\n          <RosterView sheet={scheduleData} />\n          {/* We'll add pagination back when we implement multiple weeks */}\n        </>\n      ) : !loading && !error && <p>No schedule data found.</p>}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}